name: CI (Python 3.9)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Ensure CI tools are present even if not in dev requirements
          pip install --upgrade \
            black isort mypy bandit pytest pytest-cov coverage

      - name: Show tool versions
        run: |
          python --version
          pip --version
          black --version
          isort --version
          mypy --version
          bandit --version
          pytest --version

      - name: Lint with Black (check only)
        run: |
          black --check .

      - name: Check imports with isort (check only)
        run: |
          isort . --profile black --check-only

      - name: Type check with mypy
        env:
          PYTHONPATH: src
        run: |
          # Adjust targets as needed
          if [ -d src ]; then TARGETS="src"; fi
          if [ -d tests ]; then TARGETS="$TARGETS tests"; fi
          if [ -z "$TARGETS" ]; then TARGETS="."; fi
          mypy $TARGETS

      - name: Security scan with Bandit
        run: |
          # Exclude tests directory by default
          if [ -d src ]; then TARGET_DIR=src; else TARGET_DIR=.; fi
          bandit -r "$TARGET_DIR" -x tests -q

      - name: Run tests with pytest and coverage
        env:
          PYTHONPATH: src
        run: |
          pytest -q --maxfail=1 --disable-warnings -W ignore::DeprecationWarning \
            --cov=src --cov-report=xml:coverage.xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: python
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      # No docs build step included to keep CI fast and quiet

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Download NLTK data
      run: |
        python -c "import nltk; nltk.download('vader_lexicon'); nltk.download('punkt')"
    
    - name: Lint with flake8
      run: |
        flake8 src/ main.py streamlit_app.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ main.py streamlit_app.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check src/ main.py streamlit_app.py
    
    - name: Import sorting check with isort
      run: |
        isort --check-only src/ main.py streamlit_app.py
    
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install safety
      run: pip install safety
    
    - name: Check for security vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload safety report
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: safety-report.json

  build-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install documentation dependencies
      run: |
        pip install -r requirements-dev.txt
    
    - name: Build documentation
      run: |
        mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
